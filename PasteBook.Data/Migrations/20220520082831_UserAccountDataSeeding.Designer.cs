// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PasteBook.Data;

namespace PasteBook.Data.Migrations
{
    [DbContext(typeof(PasteBookDbContext))]
    [Migration("20220520082831_UserAccountDataSeeding")]
    partial class UserAccountDataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PasteBook.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(Max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("PasteBook.Data.Models.BlockedAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockedAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BlockedDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("BlockerAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockerAccountId");

                    b.ToTable("BlockedAccounts");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentingUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("FriendAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("PasteBook.Data.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("RequestReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("RequestSenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestReceiverId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LikerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)");

                    b.Property<int?>("FriendRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("LikesId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("FriendRequestId");

                    b.HasIndex("LikesId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Visibility")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PasteBook.Data.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("char(96)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Album", b =>
                {
                    b.HasOne("PasteBook.Data.Models.UserAccount", "UserAccount")
                        .WithMany("Albums")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("PasteBook.Data.Models.BlockedAccount", b =>
                {
                    b.HasOne("PasteBook.Data.Models.UserAccount", "UserAccount")
                        .WithMany("BlockedAccounts")
                        .HasForeignKey("BlockerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Comment", b =>
                {
                    b.HasOne("PasteBook.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Friend", b =>
                {
                    b.HasOne("PasteBook.Data.Models.UserAccount", "UserAccount")
                        .WithMany("Friends")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("PasteBook.Data.Models.FriendRequest", b =>
                {
                    b.HasOne("PasteBook.Data.Models.UserAccount", "RequestReceiver")
                        .WithMany("FriendRequests")
                        .HasForeignKey("RequestReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestReceiver");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Image", b =>
                {
                    b.HasOne("PasteBook.Data.Models.Album", "Album")
                        .WithMany("Images")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Like", b =>
                {
                    b.HasOne("PasteBook.Data.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Notification", b =>
                {
                    b.HasOne("PasteBook.Data.Models.Comment", "Comment")
                        .WithMany("Notifications")
                        .HasForeignKey("CommentId");

                    b.HasOne("PasteBook.Data.Models.FriendRequest", "FriendRequest")
                        .WithMany("Notifications")
                        .HasForeignKey("FriendRequestId");

                    b.HasOne("PasteBook.Data.Models.Like", "Likes")
                        .WithMany("Notifications")
                        .HasForeignKey("LikesId");

                    b.HasOne("PasteBook.Data.Models.UserAccount", "UserAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("FriendRequest");

                    b.Navigation("Likes");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Post", b =>
                {
                    b.HasOne("PasteBook.Data.Models.Album", "Albums")
                        .WithMany()
                        .HasForeignKey("AlbumId");

                    b.HasOne("PasteBook.Data.Models.UserAccount", "UserAccount")
                        .WithMany("Posts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Albums");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Album", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Comment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PasteBook.Data.Models.FriendRequest", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Like", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PasteBook.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("PasteBook.Data.Models.UserAccount", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("BlockedAccounts");

                    b.Navigation("FriendRequests");

                    b.Navigation("Friends");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
